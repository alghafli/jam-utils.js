"use strict";{let JamUtils={};JamUtils.events={variables:{ARROW_FORWARD(evt){return getComputedStyle(evt.target).direction=="rtl"?"ArrowLeft":"ArrowRight"},ARROW_BACKWARD(evt){return getComputedStyle(evt.target).direction!="rtl"?"ArrowLeft":"ArrowRight"}},operators:{"=":(a,b)=>a==b,"!=":(a,b)=>a!=b,">":(a,b)=>a>b,">=":(a,b)=>a>=b,"<":(a,b)=>a<b,"<=":(a,b)=>a<=b,startsWith:(a,b)=>a.startsWith(b),endsWith:(a,b)=>a.endsWith(b),includes:(a,b)=>a.includes(b)},methods:{stop:evt=>evt.stopPropagation(),stopImmediate:evt=>evt.stopImmediatePropagation(),prevent:evt=>evt.preventDefault()},event_regex:/[\w-]+/y,modifiers_regex:/\[(?<test>[^\]]*)\]|\.(?<method>\w+)/g,test_regex:/^\s*(?<_not>!)?\s*(?<_a>\w+)\s*(?:(?:(?<_op>[^\w\s]+)|\s(?<_op_word>[^\s'"]+)\s)\s*(?<_b>\d+|['"].*['"]|\w+))?\s*$/y,str_regex:/^['"](?<text>.*)['"]$/y,parse(text){this.event_regex.lastIndex=0;this.modifiers_regex.lastIndex=0;let event_name=this.event_regex.exec(text)[0];let modifiers_str=text.substring(this.event_regex.lastIndex);let modifiers=modifiers_str.matchAll(this.modifiers_regex);let tests=[];let methods=[];for(let m of modifiers){if(m.groups.test!=undefined){tests.push(m.groups.test)}else{methods.push(m.groups.method)}}for(let idx in tests){let t=tests[idx];this.test_regex.lastIndex=0;let parsed_test=this.test_regex.exec(t);if(parsed_test==null){throw"invalid pattern"}else{let test_obj={not:parsed_test.groups._not!=undefined,op:parsed_test.groups._op||parsed_test.groups._op_word,a:parsed_test.groups._a,b:parsed_test.groups._b,replace_b:false};let float_value=parseFloat(test_obj.b);this.str_regex.lastIndex=0;if(!Number.isNaN(float_value)){test_obj.b=float_value}else if(this.str_regex.exec(test_obj.b)){test_obj.b=test_obj.b.substring(1,test_obj.b.length-1)}else if(test_obj.b!=undefined){test_obj.replace_b=true}tests[idx]=test_obj}}return{event:event_name,tests:tests,methods:methods}},check_tests(tests,evt){for(let t of tests){let result=evt[t.a];if(t.op!=undefined){let a=result;let b=t.b;if(t.replace_b){b=this.variables[b](evt)}result=this.operators[t.op](a,b)}result=t.not?!result:result;if(!result){return false}}return true},apply_methods(methods,evt){for(let m of methods){this.methods[m](evt)}},modify_listener(evt_info,f){let this_obj=this;return function(evt){if(this_obj.check_tests(evt_info.tests,evt)){this_obj.apply_methods(evt_info.methods,evt);f(evt)}}},add_event_listener(elem,evt_info,f){if(typeof f=="string"){f=new CustomEvent(f)}if(f instanceof Event){let new_evt=f;f=evt=>evt.currentTarget.dispatchEvent(new_evt)}if(typeof evt_info!="object"){evt_info=this.parse(evt_info)}if(evt_info.tests.length||evt_info.methods.length){f=this.modify_listener(evt_info,f)}elem.addEventListener(evt_info.event,f);return f}};JamUtils.shortcuts={shortcuts:new Map,add(elem,shortcut,evt){console.warn("JamUtils.events is a better alternative to JamUtils.shortcuts. Consider using it.");if(!JamUtils.shortcuts.shortcuts.has(elem)){JamUtils.shortcuts.shortcuts.set(elem,new Map)}let elem_shortcuts=JamUtils.shortcuts.shortcuts.get(elem);elem_shortcuts.set(shortcut,evt)},delete(elem,shortcut){let elem_shortcuts=JamUtils.shortcuts.shortcuts.get(elem);elem_shortcuts.delete(shortcut);if(elem_shortcuts.size==0){JamUtils.shortcuts.shortcuts.delete(elem)}},on_shortcut(evt){let target_shortcuts=JamUtils.shortcuts.shortcuts.get(evt.currentTarget);if(target_shortcuts==undefined||evt.repeat)return;let pressed=[];if(evt.ctrlKey)pressed.push("ctrl");if(evt.altKey)pressed.push("alt");if(evt.shiftKey)pressed.push("shift");pressed.push(evt.code);let new_evt=target_shortcuts.get(pressed.join("+"));if(new_evt==undefined)return;evt.stopPropagation();evt.preventDefault();if(new_evt instanceof Function){new_evt({target:evt.currentTarget,currentTarget:evt.currentTarget})}else{if(typeof new_evt=="string"){new_evt=new CustomEvent(new_evt)}evt.currentTarget.dispatchEvent(new_evt)}},from_object(obj,options={}){JamUtils.for_each_selector(obj,(elem,obj)=>{for(let keys in obj){JamUtils.shortcuts.add(elem,keys,obj[keys])}},options)}};JamUtils.calendars={NATIVE_CALENDAR:"gregory",MULTIPLIERS:{year:["min_days","min_months"],month:["min_days"],day:[]},calendars:{gregory:{min_days:28,min_months:12},islamic:{min_days:29,min_months:12},"islamic-umalqura":{min_days:29,min_months:12},"islamic-tbla":{min_days:29,min_months:12},"islamic-civil":{min_days:29,min_months:12},"islamic-rgsa":{min_days:29,min_months:12},persian:{min_days:29,min_months:12}},add(name,min_days,min_months){this.calendars[name]={min_days:min_days,min_months:min_months}},delete(name){delete this.calendars[name]},convert(date,source="gregory",target="islamic"){let native_date=this.to_native(date,source);return this.from_native(native_date,target)},to_native(date,calendar){if(calendar==this.NATIVE_CALENDAR){return new Date(date.year,date.month-1,date.day)}let today=new Date;let result={year:today.getFullYear(),month:today.getMonth()+1,day:today.getDate()};let converter=Intl.DateTimeFormat("en",{calendar:calendar});for(let part of["year","month","day"]){let error=Number.POSITIVE_INFINITY;for(let cycles=10;error!=0;cycles--){if(cycles<=0){let msg="max approximation cycles exceeded. "+"is date conversion buggy?"}let native_date=new Date(result.year,result.month-1,result.day);let approx={};converter.formatToParts(native_date).forEach(obj=>{approx[obj.type]=Number(obj.value)});error=date[part]-approx[part];result.year=native_date.getFullYear();result.month=native_date.getMonth()+1;result.day=native_date.getDate();for(let multiplier of this.MULTIPLIERS[part]){error*=this.calendars[calendar][multiplier]}result.day+=error}}return new Date(result.year,result.month-1,result.day)},from_native(date,calendar){let converter=Intl.DateTimeFormat("en",{calendar:calendar});let converted={};converter.formatToParts(date).forEach(obj=>{converted[obj.type]=Number(obj.value)});return{year:converted.year,month:converted.month,day:converted.day}}};JamUtils.sleep=function(t){return new Promise((res,rej)=>setTimeout(res,1e3*t))};JamUtils.for_each_selector=function(obj,cb,options={}){let root=options.root??document;for(let selector in obj){let elems;if(options.all){elems=root.querySelectorAll(selector)}else{elems=root.querySelector(selector);elems=elems==null?[]:[elems]}if(elems.length==0){console.warn(`could not find any matching element for selector '${selector}'`);continue}for(let elem of elems){cb(elem,obj[selector])}}};JamUtils.add_listeners_from_object=function(obj,options={}){JamUtils.for_each_selector(obj,(elem,obj)=>{for(let evt_name in obj){JamUtils.events.add_event_listener(elem,evt_name,obj[evt_name])}},options)};if(typeof define==="function"&&define.amd){define(JamUtils)}else{window.JamUtils=JamUtils}}
