"use strict";{let JamUtils={};JamUtils.sleep=function(t){return new Promise((res,rej)=>setTimeout(res,1e3*t))};JamUtils.for_each_selector=function(obj,cb,options={}){let root=options.root??document;for(let selector in obj){let elems;if(options.all){elems=root.querySelectorAll(selector)}else{elems=root.querySelector(selector);elems=elems==null?[]:[elems]}if(elems.length==0){console.warn(`could not find any matching element for selector '${selector}'`);continue}for(let elem of elems){cb(elem,obj[selector])}}};JamUtils.add_listeners_from_object=function(obj,options={}){JamUtils.for_each_selector(obj,(elem,obj)=>{for(let evt_name in obj){elem.addEventListener(evt_name,obj[evt_name])}},options)};JamUtils.shortcuts={shortcuts:new Map,add(elem,shortcut,evt){if(!JamUtils.shortcuts.shortcuts.has(elem)){JamUtils.shortcuts.shortcuts.set(elem,new Map)}let elem_shortcuts=JamUtils.shortcuts.shortcuts.get(elem);elem_shortcuts.set(shortcut,evt)},delete(elem,shortcut){let elem_shortcuts=JamUtils.shortcuts.shortcuts.get(elem);elem_shortcuts.delete(shortcut);if(elem_shortcuts.size==0){JamUtils.shortcuts.shortcuts.delete(elem)}},on_shortcut(evt){let target_shortcuts=JamUtils.shortcuts.shortcuts.get(evt.currentTarget);if(target_shortcuts==undefined||evt.repeat)return;let pressed=[];if(evt.ctrlKey)pressed.push("ctrl");if(evt.altKey)pressed.push("alt");if(evt.shiftKey)pressed.push("shift");pressed.push(evt.code);let new_evt=target_shortcuts.get(pressed.join("+"));if(new_evt==undefined)return;evt.stopPropagation();evt.preventDefault();if(new_evt instanceof Function){new_evt({target:evt.currentTarget,currentTarget:evt.currentTarget})}else{if(typeof new_evt=="string"){new_evt=new Event(new_evt)}evt.currentTarget.dispatchEvent(new_evt)}},from_object(obj,options={}){JamUtils.for_each_selector(obj,(elem,obj)=>{for(let keys in obj){JamUtils.shortcuts.add(elem,keys,obj[keys])}},options)}};JamUtils.calendars={NATIVE_CALENDAR:"gregory",MULTIPLIERS:{year:["min_days","min_months"],month:["min_days"],day:[]},calendars:{gregory:{min_days:28,min_months:12},islamic:{min_days:29,min_months:12},"islamic-umalqura":{min_days:29,min_months:12},"islamic-tbla":{min_days:29,min_months:12},"islamic-civil":{min_days:29,min_months:12},"islamic-rgsa":{min_days:29,min_months:12},persian:{min_days:29,min_months:12}},add(name,min_days,min_months){this.calendars[name]={min_days:min_days,min_months:min_months}},delete(name){delete this.calendars[name]},convert(date,source="gregory",target="islamic"){let native_date=this.to_native(date,source);return this.from_native(native_date,target)},to_native(date,calendar){if(calendar==this.NATIVE_CALENDAR){return new Date(date.year,date.month-1,date.day)}let today=new Date;let result={year:today.getFullYear(),month:today.getMonth()+1,day:today.getDate()};let converter=Intl.DateTimeFormat("en",{calendar:calendar});for(let part of["year","month","day"]){let error=Number.POSITIVE_INFINITY;for(let cycles=10;error!=0;cycles--){if(cycles<=0){let msg="max approximation cycles exceeded. "+"is date conversion buggy?"}let native_date=new Date(result.year,result.month-1,result.day);let approx={};converter.formatToParts(native_date).forEach(obj=>{approx[obj.type]=Number(obj.value)});error=date[part]-approx[part];result.year=native_date.getFullYear();result.month=native_date.getMonth()+1;result.day=native_date.getDate();for(let multiplier of this.MULTIPLIERS[part]){error*=this.calendars[calendar][multiplier]}result.day+=error}}return new Date(result.year,result.month-1,result.day)},from_native(date,calendar){let converter=Intl.DateTimeFormat("en",{calendar:calendar});let converted={};converter.formatToParts(date).forEach(obj=>{converted[obj.type]=Number(obj.value)});return{year:converted.year,month:converted.month,day:converted.day}}};if(typeof define==="function"&&define.amd){define(JamUtils)}else{window.JamUtils=JamUtils}}
