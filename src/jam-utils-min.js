function JamUtils(options={}){for(let f of JamUtils.constructors){f.call(this,options)}}JamUtils.constructors=[];JamUtils._import_on_load_cb=function(resolve,absolute_url,name,alias,evt){JamUtils.imported_modules.add(absolute_url);if(name!=undefined&&alias!=undefined){window[alias]=window[name]}evt.target.removeEventListener("error",JamUtils._import_on_error_cb);resolve()};JamUtils._import_on_error_cb=function(reject,absolute_url,evt){evt.target.removeEventListener("load",JamUtils._import_on_load_cb);evt.target.remove();return reject(`failed to import script at ${absolute_url}`)};JamUtils.imported_modules=new Set;JamUtils.constructors.push(function(options){this.base_url=options.base_url??document.currentScript.src});JamUtils.import=function(url,options={}){let base_url=new URL(options.base_url??document.baseURI).href;let absolute_url=new URL(url,base_url).href;if(this.imported_modules.has(absolute_url)){console.debug(`ignored import of already imported script "${absolute_url}"`);return}let{promise,resolve,reject}=Promise.withResolvers();let script=document.createElement("script");script.type="text/javascript";script.src=absolute_url;let attrs=options.attrs??{};for(let attr in attrs){script.setAttribute(attr,attrs[attr])}script.addEventListener("load",JamUtils._import_on_load_cb.bind(null,resolve,absolute_url,options.name,options.alias),{once:true});script.addEventListener("error",JamUtils._import_on_error_cb.bind(null,reject,absolute_url),{once:true});document.head.append(script);return promise};JamUtils.prototype.import=function(url,options={}){options.base_url=this.base_url;return this.constructor.import(url,options)};JamUtils.sleep=function(t){return new Promise((res,rej)=>setTimeout(res,1e3*t))};JamUtils.shortcuts={shortcuts:new Map,add(elem,shortcut,evt){if(!this.shortcuts.has(elem)){this.shortcuts.set(elem,new Map)}let elem_shortcuts=this.shortcuts.get(elem);elem_shortcuts.set(shortcut,evt)},delete(elem,shortcut){let elem_shortcuts=this.shortcuts.get(elem);elem_shortcuts.delete(shortcut);if(elem_shortcuts.size==0){this.shortcuts.delete(elem)}},on_shortcut(evt){let target_shortcuts=JamUtils.shortcuts.shortcuts.get(evt.currentTarget);if(target_shortcuts==undefined||evt.repeat)return;let pressed=[];if(evt.ctrlKey)pressed.push("ctrl");if(evt.altKey)pressed.push("alt");if(evt.shiftKey)pressed.push("shift");pressed.push(evt.code);let new_evt=target_shortcuts.get(pressed.join("+"));if(new_evt==undefined)return;evt.stopPropagation();evt.preventDefault();if(new_evt instanceof Function){new_evt({target:evt.currentTarget,currentTarget:evt.currentTarget})}else{if(typeof new_evt=="string"){new_evt=new Event(new_evt)}evt.currentTarget.dispatchEvent(new_evt)}}};
